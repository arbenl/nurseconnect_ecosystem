{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 +-----------------+ +-----------------------+ +-----------------------+ | Flutter App |----->| Firebase (Backend) |<-----| Cloud Functions | |(iOS & Android) | |(Auth, Firestore) | |(TypeScript) | +-----------------+ +-----------------------+ +-----------------------+ ^ ^ ^ | | | | User Actions | Data Storage & Realtime | Backend Logic & Triggers| | | | | | - Login/Register | - User Data (/users/\{uid\})| - onNewServiceRequest | | - Request Service | - Service Requests | - respondToOffer (coded)| | - (Future: Accept/Reject)| (serviceRequests) | | | | - Nurse Data (manual) | | +------------------------+---------------------------+-----------------------+ **Flutter App Details:** * **Structure:** Feature-first (auth, home), Layered (presentation, domain, data) * **Core Dependencies:** bloc, getit, equatable, go_router * **Firebase Integration:** firebase_core, firebase_auth, cloud_firestore, firebase_options.dart * **User Flow (Patient):** * Login/Registration (using FirebaseAuth) * Home Screen (Logout, "Request Service") * Location Fetching (geolocator) * Data Models: UserData, NurseData, ServiceRequestData * Repositories: UserRepository, ServiceRequestRepository (Firestore) * Blocs: LoginBloc, RegistrationBloc, HomeBloc * Navigation (go_router) * Submitting Service Request -> Firestore ('pending' status) **Firebase (Backend) Details:** * **Authentication (Auth):** Handles user login and registration. * **Firestore:** * Stores user data in `/users/\{uid\}`. * Stores service requests in `serviceRequests` collection (status updates). * Stores initial nurse data (manually added with geohash). * **Security Rules:** Configured for `/users` access and Firestore write permissions. **Cloud Functions (Backend Logic - TypeScript):** * **Structure:** `index.ts` (exports), `request_handlers.ts` (logic) * **Dependencies:** Firebase Admin SDK * **`onNewServiceRequest` (Deployed & Tested):** * Triggers on new `serviceRequests` document. * Finds nearby available nurses (geo-query). * Selects the nearest nurse. * Atomically updates `serviceRequests` status to 'offered'. * Atomically updates nurse availability to `false`. * **`respondToOffer` (Coded, Not Deployed/Tested):** * Handles 'accepted'/'rejected' responses from nurses. * Includes transaction logic. **Key Interactions:** 1. Flutter App (Patient) initiates a "Request Service." 2. Flutter App fetches the user's location. 3. Flutter App creates a new document in the `serviceRequests` collection in Firestore with status 'pending'. 4. Cloud Function `onNewServiceRequest` is triggered by the new `serviceRequests` document. 5. `onNewServiceRequest` queries Firestore for nearby available nurses (using geohash). 6. `onNewServiceRequest` selects the nearest nurse. 7. `onNewServiceRequest` updates the `serviceRequests` document status to 'offered' and updates the selected nurse's availability in Firestore (atomically). 8. (Future) Flutter App (Nurse) will interact to 'accept' or 'reject' the offered service request, triggering the `respondToOffer` Cloud Function. This sketch provides a visual and textual overview of the NurseConnect app's architecture and the development progress you've made. It highlights the key components and how they interact to achieve the MVP goal. Let me know if you'd like any specific part of this sketch elaborated further!}